<?xml-model href="teipublisher_odds.xsd"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:pb="http://teipublisher.com/1.0" xml:lang="en">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>Surface</title>
            </titleStmt>
            <publicationStmt>
                <publisher>eXistSolutions GmbH</publisher>
                <availability>
                    <licence target="https://www.gnu.org/licenses/gpl-3.0.en.html">Distributed under GNU General Public License</licence>
                    <p>Copyright 2017 <ref target="http://existsolutions.com">eXistSolutions GmbH</ref>
                    </p>
                    <p>This program is free software: you can redistribute it and/or modify
                        it under the terms of the GNU General Public License as published by
                        the Free Software Foundation, either version 3 of the License, or
                        (at your option) any later version.</p>
                    <p>This program is distributed in the hope that it will be useful,
                        but WITHOUT ANY WARRANTY; without even the implied warranty of
                        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        GNU General Public License for more details.</p>
                </availability>
            </publicationStmt>
            <sourceDesc>
                <p>Generated by <ref target="http://tei-publisher.com">TEI Publisher</ref>
                </p>
                <p>born digital</p>
            </sourceDesc>
        </fileDesc>
        <encodingDesc>
            <tagsDecl>
                <rendition source="surface.css"/>
            </tagsDecl>
        </encodingDesc>
        <revisionDesc>
            <change when="2023-12-13+01:00">Initial version</change>
        </revisionDesc>
    </teiHeader>
    <text>
        <body>
            <schemaSpec start="TEI teiCorpus" ident="surface" source="teipublisher.odd"> 
                <elementSpec ident="pb" mode="change">
                    <model predicate="root($parameters?root)//sourceDoc" behaviour="inline">
            <pb:template xmlns="" xml:space="preserve"><h1>[[content]]</h1></pb:template>
            <outputRendition xml:space="preserve">
            color: red;
            </outputRendition>
        </model>
                    <model behaviour="break" useSourceRendition="true">
            <param name="type" value="'page'"/>
            <param name="label" value="@xml:id"/>
            <outputRendition xml:space="preserve">
            display: block; margin-left: 4pt; color: grey; float: right;
            </outputRendition>
            <outputRendition xml:space="preserve" scope="before">
            content: '[Seite ';
            </outputRendition>
            <outputRendition xml:space="preserve" scope="after">
            content: ']';
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="hi" mode="change">
                    <model predicate="@rend='underline'" behaviour="inline"/>
                    <model predicate="@rend='doubleUnderline'" behaviour="inline"/>
                    <model predicate="@rend='latin'" behaviour="inline"/>
                </elementSpec>
                <elementSpec ident="note" mode="change">
                    <model behaviour="omit"/>
                </elementSpec>
                <elementSpec ident="noteGrp" mode="add"/>
            <elementSpec ident="lb" mode="change"/>
                <elementSpec ident="p" mode="change"/>
                <elementSpec ident="sourceDoc" mode="add">
                    <model behaviour="body" cssClass="transkriptionField"/>
                </elementSpec>
                <elementSpec ident="text" mode="change"/>
                <elementSpec ident="div2" mode="add"/>
                <elementSpec ident="body" mode="change"/>
                <elementSpec ident="surface" mode="add">
                    <model predicate="@type='relative'" behaviour="body">
            <param name="content" value="."/>
            <param name="id" value="@xml:id"/>
            <param name="pb" value="replace(@start, '#', '')"/>
            <param name="style" value="@style"/>
            <param name="debug" value="root($parameters?root)//lb[1]/@xml:id"/>
            <pb:template xmlns="" xml:space="preserve">
                            <h1>Diplomatische Transkription [[pb]]</h1>
                           
                            <div id="[[id]]" class="transkriptionField" style="[[style]]">
                                [[content]]
                            </div>
                        </pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="line" mode="add">
                    <model predicate="ends-with(parent::zone/@type, 'Block') and parent::zone/parent::surface" behaviour="pass-through">
            <param name="id" value="@xml:id"/>
            <param name="style" value="@style"/>
            <param name="n" value="@n"/>
            <param name="hand" value="@hand"/>
            <param name="rend" value="@rend"/>
            <pb:template xmlns="" xml:space="preserve"><div id="[[id]]" class="line" style="[[style]]">
  <span class="lnr">[[n]]:</span>
  <span class="[[hand]] [[rend]]" style="[[spanStyle]]">[[content]]</span>
</div></pb:template>
        </model>
                    <model predicate="parent::zone/parent::zone and not(ends-with(parent::zone/@type, 'Block'))" behaviour="pass-through">
            <param name="n" value="@n"/>
            <param name="style" value="@style"/>
            <param name="id" value="@xml:id"/>
            <param name="content" value="."/>
            <param name="isMarginLeft" value="if (contains(parent::zone/@type, 'zone')) then ('marginLeft') else ()"/>
            <param name="spanStyle" value="parent::zone/@style"/>
            <param name="hand" value="@hand"/>
            <param name="rend" value="@rend"/>
            <pb:template xmlns="" xml:space="preserve"><div id="[[id]]" class="zoneLine" style="[[style]]">
  <span class="lnr">[[n]]:</span>
  <span class="[[isMarginLeft]] [[hand]] [[rend]]" style="[[spanStyle]]">[[content]]</span>
</div></pb:template>
        </model>
                </elementSpec>
            <elementSpec ident="zone" mode="add">
                    <model predicate="parent::line and not(ends-with(@type, 'Block'))" behaviour="pass-through">
            <param name="id" value="@xml:id"/>
            <param name="content" value="."/>
            <param name="class" value="if (@type = 'head') then ('marginLeft head') else ()"/>
            <param name="style" value="@style"/>
            <pb:template xmlns="" xml:space="preserve"><span id="[[id]]" style="[[style]]" class="[[class]]">
  [[content]]
</span></pb:template>
        </model>
                    <model predicate="@xml:id and (empty(@type) or ends-with(@type, 'Block'))" behaviour="pass-through">
            <param name="zone" value="substring-after(@start, '#')"/>
            <param name="style" value="@style"/>
            <param name="class" value="if (ends-with(@type,'Block') and not(starts-with(@type, 'text'))) then (concat(@type, ' textBlock')) else (@type)"/>
            <param name="content" value="."/>
            <param name="id" value="@xml:id"/>
            <pb:template xmlns="" xml:space="preserve"><div id="[[id]]" style="[[style]]" class="[[class]]" debug-msg="test">
  [[content]]
</div></pb:template>
        </model>
                    <model predicate="parent::zone and not(ends-with(@type, 'Block'))" behaviour="pass-through">
            <param name="id" value="@xml:id"/>
            <param name="class" value="@type"/>
            <param name="content" value="."/>
            <pb:template xmlns="" xml:space="preserve"><div id="[[id]]" class="[[class]]">
  [[content]]
</div></pb:template>
        </model>
                </elementSpec>
            <elementSpec ident="add" mode="change">
                    <model predicate="parent::metamark and (@place='above' or @place='below')" behaviour="pass-through">
            <param name="metamarkClass" value="if (parent::metamark/@rend) then (concat(parent::metamark/@rend, 'insertion-', @place)) else (concat('insMinsertion-', @place))"/>
            <param name="metamarkStyle" value="parent::metamark/@style"/>
            <param name="hand" value="@hand"/>
            <param name="class" value="@place"/>
            <param name="style" value="@style"/>
            <param name="content" value="."/>
            <pb:template xmlns="" xml:space="preserve"><span class="[[metamarkClass]] [[hand]]" style="[[metamarkStyle]]">
  <span class="[[class]]" style="[[style]]">[[content]]</span>
</span></pb:template>
        </model>
                    <model predicate="not(parent::metamark) and (@place='above' or @place='below')" behaviour="pass-through">
            <param name="hand" value="@hand"/>
            <param name="parentClass" value="concat('insertion-', @place)"/>
            <param name="class" value="@place"/>
            <param name="style" value="@style"/>
            <param name="content" value="."/>
            <pb:template xmlns="" xml:space="preserve"><span class="[[parentClass]] [[hand]]">
  <span class="[[class]]" style="[[style]]">[[content]]</span>
</span></pb:template>
        </model>
                </elementSpec>
            </schemaSpec>
        </body>
    </text>
</TEI>